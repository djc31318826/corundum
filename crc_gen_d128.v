//Generated by tools @ 2024/8/18 13:17:25
//Ploy:0x4c11db7
//Ploy:x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x1+1
//input reverse:false
//output reverse:false
//init value:0xffffffff
//output xor value:0xffffffff
`timescale 1ns/1ps
module crc_gen_d128
(
    input                    clk_sys,
    input                    rst_sys,
    input         [127:0]    data_in,
    input                    data_en,
    input                    init   ,
    input         [  3:0]    mod    ,
    output        [ 31:0]    result 
);
localparam    CRC_INIT_VALUE=    32'hffffffff;
localparam    CRC_OUT_XOR_VALUE=    32'hffffffff;
wire    [31:0]    crc_next;
wire    [127:0]    data_in_buf;
wire    [31:0]    data_out_buf;
wire    [31:0]    crc_mid0;
wire    [31:0]    crc_mid1;
wire    [31:0]    crc_mid2;
wire    [31:0]    crc_mid3;
wire    [31:0]    crc_mid4;
wire    [31:0]    crc_mid5;
wire    [31:0]    crc_mid6;
wire    [31:0]    crc_mid7;
wire    [31:0]    crc_mid8;
wire    [31:0]    crc_mid9;
wire    [31:0]    crc_mid10;
wire    [31:0]    crc_mid11;
wire    [31:0]    crc_mid12;
wire    [31:0]    crc_mid13;
wire    [31:0]    crc_mid14;
wire    [31:0]    crc_mid15;
wire    [31:0]    crc_mid_init0;
wire    [31:0]    crc_mid_init1;
wire    [31:0]    crc_mid_init2;
wire    [31:0]    crc_mid_init3;
wire    [31:0]    crc_mid_init4;
wire    [31:0]    crc_mid_init5;
wire    [31:0]    crc_mid_init6;
wire    [31:0]    crc_mid_init7;
wire    [31:0]    crc_mid_init8;
wire    [31:0]    crc_mid_init9;
wire    [31:0]    crc_mid_init10;
wire    [31:0]    crc_mid_init11;
wire    [31:0]    crc_mid_init12;
wire    [31:0]    crc_mid_init13;
wire    [31:0]    crc_mid_init14;
wire    [31:0]    crc_mid_init15;
reg    [31:0]    crc_shift;
assign    data_in_buf={data_in[7],data_in[6],data_in[5],data_in[4],data_in[3],data_in[2],data_in[1],data_in[0],data_in[15],data_in[14],data_in[13],data_in[12],data_in[11],data_in[10],data_in[9],data_in[8],data_in[23],data_in[22],data_in[21],data_in[20],data_in[19],data_in[18],data_in[17],data_in[16],data_in[31],data_in[30],data_in[29],data_in[28],data_in[27],data_in[26],data_in[25],data_in[24],data_in[39],data_in[38],data_in[37],data_in[36],data_in[35],data_in[34],data_in[33],data_in[32],data_in[47],data_in[46],data_in[45],data_in[44],data_in[43],data_in[42],data_in[41],data_in[40],data_in[55],data_in[54],data_in[53],data_in[52],data_in[51],data_in[50],data_in[49],data_in[48],data_in[63],data_in[62],data_in[61],data_in[60],data_in[59],data_in[58],data_in[57],data_in[56],data_in[71],data_in[70],data_in[69],data_in[68],data_in[67],data_in[66],data_in[65],data_in[64],data_in[79],data_in[78],data_in[77],data_in[76],data_in[75],data_in[74],data_in[73],data_in[72],data_in[87],data_in[86],data_in[85],data_in[84],data_in[83],data_in[82],data_in[81],data_in[80],data_in[95],data_in[94],data_in[93],data_in[92],data_in[91],data_in[90],data_in[89],data_in[88],data_in[103],data_in[102],data_in[101],data_in[100],data_in[99],data_in[98],data_in[97],data_in[96],data_in[111],data_in[110],data_in[109],data_in[108],data_in[107],data_in[106],data_in[105],data_in[104],data_in[119],data_in[118],data_in[117],data_in[116],data_in[115],data_in[114],data_in[113],data_in[112],data_in[127],data_in[126],data_in[125],data_in[124],data_in[123],data_in[122],data_in[121],data_in[120]};
assign    data_out_buf={crc_shift[7],crc_shift[6],crc_shift[5],crc_shift[4],crc_shift[3],crc_shift[2],crc_shift[1],crc_shift[0],crc_shift[15],crc_shift[14],crc_shift[13],crc_shift[12],crc_shift[11],crc_shift[10],crc_shift[9],crc_shift[8],crc_shift[23],crc_shift[22],crc_shift[21],crc_shift[20],crc_shift[19],crc_shift[18],crc_shift[17],crc_shift[16],crc_shift[31],crc_shift[30],crc_shift[29],crc_shift[28],crc_shift[27],crc_shift[26],crc_shift[25],crc_shift[24]};
assign    result=data_out_buf^CRC_OUT_XOR_VALUE;
assign    crc_mid15=crc_func(data_in_buf[127:120],crc_shift);
assign    crc_mid14=crc_func(data_in_buf[119:112],crc_mid15);
assign    crc_mid13=crc_func(data_in_buf[111:104],crc_mid14);
assign    crc_mid12=crc_func(data_in_buf[103:96],crc_mid13);
assign    crc_mid11=crc_func(data_in_buf[95:88],crc_mid12);
assign    crc_mid10=crc_func(data_in_buf[87:80],crc_mid11);
assign    crc_mid9=crc_func(data_in_buf[79:72],crc_mid10);
assign    crc_mid8=crc_func(data_in_buf[71:64],crc_mid9);
assign    crc_mid7=crc_func(data_in_buf[63:56],crc_mid8);
assign    crc_mid6=crc_func(data_in_buf[55:48],crc_mid7);
assign    crc_mid5=crc_func(data_in_buf[47:40],crc_mid6);
assign    crc_mid4=crc_func(data_in_buf[39:32],crc_mid5);
assign    crc_mid3=crc_func(data_in_buf[31:24],crc_mid4);
assign    crc_mid2=crc_func(data_in_buf[23:16],crc_mid3);
assign    crc_mid1=crc_func(data_in_buf[15:8],crc_mid2);
assign    crc_mid0=crc_func(data_in_buf[7:0],crc_mid1);
always@(posedge clk_sys or posedge rst_sys)
begin
    if(rst_sys==1'b1)
        crc_shift<=CRC_INIT_VALUE;
    else if(init==1'b1&&data_en==1'b0)
        crc_shift<=CRC_INIT_VALUE;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd0)
        crc_shift<=crc_mid_init0;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd1)
        crc_shift<=crc_mid_init1;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd2)
        crc_shift<=crc_mid_init2;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd3)
        crc_shift<=crc_mid_init3;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd4)
        crc_shift<=crc_mid_init4;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd5)
        crc_shift<=crc_mid_init5;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd6)
        crc_shift<=crc_mid_init6;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd7)
        crc_shift<=crc_mid_init7;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd8)
        crc_shift<=crc_mid_init8;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd9)
        crc_shift<=crc_mid_init9;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd10)
        crc_shift<=crc_mid_init10;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd11)
        crc_shift<=crc_mid_init11;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd12)
        crc_shift<=crc_mid_init12;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd13)
        crc_shift<=crc_mid_init13;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd14)
        crc_shift<=crc_mid_init14;
    else if(init==1'b1&&data_en==1'b1&&mod==4'd15)
        crc_shift<=crc_mid_init15;
    else if(data_en==1'b1&&mod==4'd0)
        crc_shift<=crc_mid0;
    else if(data_en==1'b1&&mod==4'd1)
        crc_shift<=crc_mid1;
    else if(data_en==1'b1&&mod==4'd2)
        crc_shift<=crc_mid2;
    else if(data_en==1'b1&&mod==4'd3)
        crc_shift<=crc_mid3;
    else if(data_en==1'b1&&mod==4'd4)
        crc_shift<=crc_mid4;
    else if(data_en==1'b1&&mod==4'd5)
        crc_shift<=crc_mid5;
    else if(data_en==1'b1&&mod==4'd6)
        crc_shift<=crc_mid6;
    else if(data_en==1'b1&&mod==4'd7)
        crc_shift<=crc_mid7;
    else if(data_en==1'b1&&mod==4'd8)
        crc_shift<=crc_mid8;
    else if(data_en==1'b1&&mod==4'd9)
        crc_shift<=crc_mid9;
    else if(data_en==1'b1&&mod==4'd10)
        crc_shift<=crc_mid10;
    else if(data_en==1'b1&&mod==4'd11)
        crc_shift<=crc_mid11;
    else if(data_en==1'b1&&mod==4'd12)
        crc_shift<=crc_mid12;
    else if(data_en==1'b1&&mod==4'd13)
        crc_shift<=crc_mid13;
    else if(data_en==1'b1&&mod==4'd14)
        crc_shift<=crc_mid14;
    else if(data_en==1'b1&&mod==4'd15)
        crc_shift<=crc_mid15;
end
function [31:0] crc_func(input [7:0] data,input [31:0] crc);
begin
    crc_func[0]=crc[24]^crc[30]^data[0]^data[6];
    crc_func[1]=crc[24]^crc[25]^crc[30]^crc[31]^data[0]^data[1]^data[6]^data[7];
    crc_func[2]=crc[24]^crc[25]^crc[26]^crc[30]^crc[31]^data[0]^data[1]^data[2]^data[6]^data[7];
    crc_func[3]=crc[25]^crc[26]^crc[27]^crc[31]^data[1]^data[2]^data[3]^data[7];
    crc_func[4]=crc[24]^crc[26]^crc[27]^crc[28]^crc[30]^data[0]^data[2]^data[3]^data[4]^data[6];
    crc_func[5]=crc[24]^crc[25]^crc[27]^crc[28]^crc[29]^crc[30]^crc[31]^data[0]^data[1]^data[3]^data[4]^data[5]^data[6]^data[7];
    crc_func[6]=crc[25]^crc[26]^crc[28]^crc[29]^crc[30]^crc[31]^data[1]^data[2]^data[4]^data[5]^data[6]^data[7];
    crc_func[7]=crc[24]^crc[26]^crc[27]^crc[29]^crc[31]^data[0]^data[2]^data[3]^data[5]^data[7];
    crc_func[8]=crc[0]^crc[24]^crc[25]^crc[27]^crc[28]^data[0]^data[1]^data[3]^data[4];
    crc_func[9]=crc[1]^crc[25]^crc[26]^crc[28]^crc[29]^data[1]^data[2]^data[4]^data[5];
    crc_func[10]=crc[2]^crc[24]^crc[26]^crc[27]^crc[29]^data[0]^data[2]^data[3]^data[5];
    crc_func[11]=crc[3]^crc[24]^crc[25]^crc[27]^crc[28]^data[0]^data[1]^data[3]^data[4];
    crc_func[12]=crc[4]^crc[24]^crc[25]^crc[26]^crc[28]^crc[29]^crc[30]^data[0]^data[1]^data[2]^data[4]^data[5]^data[6];
    crc_func[13]=crc[5]^crc[25]^crc[26]^crc[27]^crc[29]^crc[30]^crc[31]^data[1]^data[2]^data[3]^data[5]^data[6]^data[7];
    crc_func[14]=crc[6]^crc[26]^crc[27]^crc[28]^crc[30]^crc[31]^data[2]^data[3]^data[4]^data[6]^data[7];
    crc_func[15]=crc[7]^crc[27]^crc[28]^crc[29]^crc[31]^data[3]^data[4]^data[5]^data[7];
    crc_func[16]=crc[8]^crc[24]^crc[28]^crc[29]^data[0]^data[4]^data[5];
    crc_func[17]=crc[9]^crc[25]^crc[29]^crc[30]^data[1]^data[5]^data[6];
    crc_func[18]=crc[10]^crc[26]^crc[30]^crc[31]^data[2]^data[6]^data[7];
    crc_func[19]=crc[11]^crc[27]^crc[31]^data[3]^data[7];
    crc_func[20]=crc[12]^crc[28]^data[4];
    crc_func[21]=crc[13]^crc[29]^data[5];
    crc_func[22]=crc[14]^crc[24]^data[0];
    crc_func[23]=crc[15]^crc[24]^crc[25]^crc[30]^data[0]^data[1]^data[6];
    crc_func[24]=crc[16]^crc[25]^crc[26]^crc[31]^data[1]^data[2]^data[7];
    crc_func[25]=crc[17]^crc[26]^crc[27]^data[2]^data[3];
    crc_func[26]=crc[18]^crc[24]^crc[27]^crc[28]^crc[30]^data[0]^data[3]^data[4]^data[6];
    crc_func[27]=crc[19]^crc[25]^crc[28]^crc[29]^crc[31]^data[1]^data[4]^data[5]^data[7];
    crc_func[28]=crc[20]^crc[26]^crc[29]^crc[30]^data[2]^data[5]^data[6];
    crc_func[29]=crc[21]^crc[27]^crc[30]^crc[31]^data[3]^data[6]^data[7];
    crc_func[30]=crc[22]^crc[28]^crc[31]^data[4]^data[7];
    crc_func[31]=crc[23]^crc[29]^data[5];
end
endfunction
endmodule
